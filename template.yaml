AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API Gateway, Lambda function, DynamoDb, S3, IAM role & policy

Parameters:
  GetHTTPMethod:
    Type: String
    Default: GET
  PostHTTPMethod:
    Type: String
    Default: POST
  StageName:
    Type: String
    Default: production
  Prefix:
    Type: String
    Default: Bank

Resources:
  DynamoDbRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Join ["_", [Ref: "Prefix", "DynamoDbPolicy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: "*"

  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TransactionsTable
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: project_id
          AttributeType: S
        - AttributeName: currency
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: project_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      LocalSecondaryIndexes:
        - IndexName: TypeIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: type
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
      GlobalSecondaryIndexes:
        - IndexName: ProjectIdAndCurrencyIndex
          KeySchema:
            - AttributeName: project_id
              KeyType: HASH
            - AttributeName: currency
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bank-transaction-invoices-andrii-yahodka

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateTransactionFunction
      CodeUri: lambda_function/
      Handler: app.lambda_handler
      Runtime: ruby3.3
      Timeout: 30
      Role: arn:aws:iam::471112870134:role/service-role/demo-lambda-role-bungmf6g

  LambdaPermission:
    DependsOn: LambdaFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", Ref: "ApiGateway", "/*"]]

  LambdaLogGroup:
    DependsOn: LambdaFunction
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref LambdaFunction]]
      RetentionInDays: 30

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["", [Ref: "Prefix", "APIGateway"]]
      Description: !Join ["_", [Ref: "Prefix", "APIGateway"]]
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'transactions'

  IndexMethod:
    DependsOn:
      - ApiGatewayResource
      - DynamoDbRole
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: !Ref GetHTTPMethod
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
          - { AWSRegion: !Ref "AWS::Region" }
        RequestTemplates:
          application/json: |
            {
              "TableName": "TransactionsTable"
            }
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                    "transactions": [
                        #foreach($transaction in $inputRoot.Items) {
                            "user_id":    "$transaction.user_id.S",
                            "project_id": "$transaction.project_id.S",
                            "amount":     "$transaction.amount.N $transaction.currency.S",
                            "type":       "$transaction.type.S"
                        }#if($foreach.hasNext),#end
                	#end
                    ]
                }
        Credentials: !GetAtt DynamoDbRole.Arn
      MethodResponses:
          - StatusCode: 200

  CreateMethod:
    DependsOn: 
      - LambdaPermission
      - LambdaFunction
      - ApiGateway
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: !Ref PostHTTPMethod
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn

  ApiGatewayDeployment:
    DependsOn:
      - IndexMethod
      - CreateMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref StageName

Outputs:
  ApiInvokeURL:
    Description: Invoke URL in Postman or cURL to access the API Gateway
