Resources:
  ClientsApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ClientsApi

  ClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ClientsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ClientsApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ClientsApiGateway
      ParentId: !GetAtt ClientsApiGateway.RootResourceId
      PathPart: 'clients'

  ClientsGenerateApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ClientsApiGateway
      ParentId: !GetAtt ClientsApiGateway.RootResourceId
      PathPart: 'clients/generate'

  ClientsApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ClientsApiGateway
      ResourceId: !Ref ClientsApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
          - { AWSRegion: !Ref "AWS::Region" }
        RequestTemplates:
          application/json: |
            {
              "TableName": "ClientsTable"
            }
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                    "clients": [
                        #foreach($client in $inputRoot.Items) {
                            "id": "$client.id.S",
                            "full_name": "$client.first_name.S $client.last_name.S",
                            "position": "$client.position.S",
                            "salary": "$client.salary.N"
                        }#if($foreach.hasNext),#end
                	#end
                    ]
                }
        Credentials: !GetAtt ClientsApiGatewayRole.Arn  # <-- Specify IAM Role ARN here
      MethodResponses:
        - StatusCode: 200

  ClientsGenerateApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ClientsApiGateway
      ResourceId: !Ref ClientsGenerateApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
          - { AWSRegion: !Ref "AWS::Region" }
        RequestTemplates:
          application/json: |
            {
              "TableName": "ClientsTable"
            }
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                    "clients": [
                        #foreach($client in $inputRoot.Items) {
                            "id": "$client.id.S",
                            "full_name": "$client.first_name.S $client.last_name.S",
                            "position": "$client.position.S",
                            "salary": "$client.salary.N"
                        }#if($foreach.hasNext),#end
                	#end
                    ]
                }
        Credentials: !GetAtt ClientsApiGatewayRole.Arn  # <-- Specify IAM Role ARN here
      MethodResponses:
        - StatusCode: 200

  ClientsApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ClientsTableDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: "*"
