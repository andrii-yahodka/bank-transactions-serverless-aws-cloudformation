AWSTemplateFormatVersion: 2010-09-09
Description: API Gateway, Authorizer and Lambda function with IAM role & policy

Parameters:
  GetHTTPMethod:
    Type: String
    Default: GET
  PostHTTPMethod:
    Type: String
    Default: POST
  Env:
    Type: String
    Default: dev
  Prefix:
    Type: String
    Default: sri

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["_", [Ref: "Prefix", "LambdaRole", Ref: "Env"]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com 
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join ["_", [Ref: "Prefix", "LambdaPolicy", Ref: "Env"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "*"
  DynamoDbRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Join ["_", [Ref: "Prefix", "DynamoDbPolicy", Ref: "Env"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: "*"

  ClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ClientsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Join ["_", [Ref: "Prefix", Ref: "Env"]]
  #     Description: !Join ["_", [Ref: "Prefix","LambdaFunction", Ref: "Env"]]
  #     Runtime: ruby3.3
  #     MemorySize: 128
  #     Timeout: 30
  #     Role: !GetAtt LambdaRole.Arn
  #     CodeUri: arn:aws:s3:::robot-dreams-lesson-3/lambda_function.zip
  #     Handler: index.lambda_handler

  LambdaPermission:
    # DependsOn: LambdaFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: arn:aws:lambda:eu-central-1:471112870134:function:GenerateClientFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", Ref: "ApiGateway", "/*"]]

  LambdaLogGroup:
    # DependsOn: LambdaFunction
    Type: AWS::Logs::LogGroup
    Properties:
      # LogGroupName: !Join ['', ['/aws/lambda/', !Ref LambdaFunction]]
      LogGroupName: !Join ['', ['/aws/lambda/']]
      RetentionInDays: 30

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["_", [Ref: "Prefix", Ref: "Env"]]
      Description: !Join ["_", [Ref: "Prefix", "APIGateway", Ref: "Env"]]
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'clients'

  IndexMethod:
    DependsOn:
      - ApiGatewayResource
      - DynamoDbRole
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: !Ref GetHTTPMethod
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
          - { AWSRegion: !Ref "AWS::Region" }
        RequestTemplates:
          application/json: |
            {
              "TableName": "ClientsTable"
            }
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                    "clients": [
                        #foreach($client in $inputRoot.Items) {
                            "id": "$client.id.S",
                            "full_name": "$client.first_name.S $client.last_name.S",
                            "position": "$client.position.S",
                            "salary": "$client.salary.N"
                        }#if($foreach.hasNext),#end
                	#end
                    ]
                }
        Credentials: !GetAtt DynamoDbRole.Arn
      MethodResponses:
          - StatusCode: 200

  CreateMethod:
    DependsOn: 
      - LambdaPermission
      # - LambdaFunction
      - ApiGateway
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: !Ref PostHTTPMethod
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: arn:aws:lambda:eu-central-1:471112870134:function:GenerateClientFunction

  # ApiGatewayDeployment:
  #   DependsOn: RestMethod
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     StageName: !Ref Env


Outputs:
  ApiInvokeURL:
    Description: Invoke this URL in Postman or cURL to access the API Gateway
    Value: !Join ['', ['https://', !Ref ApiGateway, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref Env]]